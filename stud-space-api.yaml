# Copyright (c) 2024 StudSpace
# 
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

openapi: 3.0.3

info:
  version: 0.1.0
  title: StudSpace API
  description: The API of the StudSpace project

servers:
  - url: https://api.studspace.com/api/v1

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.studspace.com/oauth/authorize
          tokenUrl: https://auth.studspace.com/oauth/token
          scopes:
            read_assigned: Read assigned resources
            read_other: Read other resources
            enroll: Enroll users
            write_assigned: Write to assigned resources
            write_other: Write to other resources
            create_users: Create users
            update_users: Modify users
            admin: Admin access

  responses:
    Unauthorized:
      description: The user is not authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: The user is not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnsupportedMedia:
      description: Unsupported media type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unknown:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      additionalProperties: false

    Channel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        owner:
          type: integer
          format: int64
          example: 151
        name:
          type: string
          example: 'Math'
        description:
          type: string
          example: 'Math subject for current year'
      required:
        - id
        - owner
        - name
        - description
      additionalProperties: false

    ChannelList:
      type: array
      maxItems: 255
      items:
        $ref: '#/components/schemas/Channel'

    ChannelDesc:
      type: object
      properties:
        owner:
          type: integer
          format: int64
          example: 141
        name:
          type: string
          example: 'Math'
        description:
          type: string
          example: 'Math subject for current year'
        banner:
          type: string
          description: Base54 encoded banner image
      required:
        - owner
        - name
        - description
      additionalProperties: false

    ImageData:
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded image data
      required:
        - data
      additionalProperties: false

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        time_joined:
          type: string
          format: date-time
          description: Timestamp of joining
        role:
          type: string
          example: "ADMIN"
          description: Role of the user
        year:
          type: integer
          example: 1
          description: Year of the user
        group:
          type: string
          example: '3A'
          description: Group of the user
        email:
          type: string
          format: email
          description: E-mail of the user
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          type: string
          format: date
        username:
          type: string
      required:
        - id
        - time_joined
        - role
        - email
        - first_name
        - last_name
        - birth_date
        - username
      additionalProperties: false

    UserList:
      type: array
      maxItems: 255
      items:
        $ref: '#/components/schemas/User'

    UserDesc:
      type: object
      properties:
        role:
          type: string
          example: "ADMIN"
          description: Role of the user
        year:
          type: integer
          example: 1
          description: Year of the user
        group:
          type: string
          example: '3A'
          description: Group of the user
        email:
          type: string
          format: email
          description: E-mail of the user
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          type: string
          format: date
        username:
          type: string
        password:
          type: string
        avatar:
          type: string
          description: Base64 encoded user avatar image
      required:
        - role
        - email
        - first_name
        - last_name
        - birth_date
        - username
        - password
      additionalProperties: false

security:
  - OAuth2: []

paths:
  /channels:
    get:
      description: Returns a list of all channels
      security:
        - OAuth2: [read_assigned, read_other]
      responses:
        '200':
          description: Successfully returned a list of channels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unknown'
    post:
      description: Add a new channel
      security:
        - OAuth2: [write_other]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelDesc'
      responses:
        '200':
          description: Channel successfully created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '415':
          $ref: '#/components/responses/UnsupportedMedia'
        default:
          $ref: '#/components/responses/Unknown'
  
  /channels/{channelId}:
    get:
      description: Get channel information
      security:
        - OAuth2: [read_assigned]
        - OAuth2: [read_other]
      parameters:
        - in: path
          name: channelId
          schema:
            type: integer
            format: int64
          required: true
          description: Id of the channel
      responses:
        '200':
          description: Return channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unknown'
  
  /channels/{channelId}/banner:
    get:
      description: Get channel banner image
      security:
        - OAuth2: [read_assigned]
        - OAuth2: [read_other]
      parameters:
        - in: path
          name: channelId
          schema:
            type: integer
            format: int64
          required: true
          description: Id of the channel
      responses:
        '200':
          description: Return channel banner image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageData'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unknown'

  /users:
    get:
      description: Returns a list of all users
      security:
        - OAuth2: [read_assigned, read_other]
      responses:
        '200':
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unknown'
    post:
      description: Add a new user
      security:
        - OAuth2: [create_users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDesc'
      responses:
        '200':
          description: User successfully created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '415':
          $ref: '#/components/responses/UnsupportedMedia'
        default:
          $ref: '#/components/responses/Unknown'

  /users/{userID}:
    get:
      description: Get user information
      security:
        - OAuth2: [read_assigned]
        - OAuth2: [read_other]
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
            format: int64
          required: true
          description: Id of the user
      responses:
        '200':
          description: Return user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unknown'

  /users/{userId}/avatar:
    get:
        description: Get user avatar
        security:
          - OAuth2: [read_assigned]
          - OAuth2: [read_other]
        parameters:
          - in: path
            name: userId
            schema:
              type: integer
              format: int64
            required: true
            description: Id of the user
        responses:
          '200':
            description: Return user avatar
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ImageData'
          '401': 
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            $ref: '#/components/responses/Unknown'
